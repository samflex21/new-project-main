{% extends "base.html" %}{% from "components/cards.html" import stat_card, progress_card %}{% from "components/chart_panels.html" import bar_chart_panel, pie_chart_panel, line_chart_panel, heatmap_panel %}{% from "components/filters.html" import department_filter, time_period_filter, demographic_filter %}{% block title %}Population Health Overview - Heart Risk Monitor{% endblock %}{% block page_title %}Population Health Overview Dashboard{% endblock %}{% block sidebar_filters %}<div class="filter-section">    <h5><i class="fas fa-filter me-2"></i>Population Filters</h5>        <!-- Department Filter -->    <div class="mb-4">        <h6 class="mb-3">Department</h6>        {{ department_filter() }}    </div>        <!-- Time Period Filter -->    <div class="mb-4">        <h6 class="mb-3">Time Period</h6>        {{ time_period_filter() }}    </div>        <!-- Demographics Filter -->    <div class="mb-4">        <h6 class="mb-3">Demographics</h6>        {{ demographic_filter() }}    </div>        <div class="d-grid gap-2 mt-4">        <button class="btn btn-light" id="apply-filters">            <i class="fas fa-check me-2"></i>Apply Filters        </button>        <button class="btn btn-outline-light" id="reset-filters">            <i class="fas fa-undo me-2"></i>Reset Filters        </button>    </div></div>{% endblock %}{% block content %}<!-- Stats Row --><div class="row mb-4">    <div class="col-xl-3 col-md-6 mb-4">        {{ stat_card("Total Patients", "124", "fas fa-users", "primary") }}    </div>    <div class="col-xl-3 col-md-6 mb-4">        {{ stat_card("Average Age", "48.7", "fas fa-calendar", "info") }}    </div>    <div class="col-xl-3 col-md-6 mb-4">        {{ stat_card("High Risk %", "22.6%", "fas fa-exclamation-triangle", "danger") }}    </div>    <div class="col-xl-3 col-md-6 mb-4">        {{ progress_card("Risk Assessment", "124", "150", "primary") }}    </div></div>        <!-- Health Risk by Income Level & Diet Score by Age Row --><div class="row">    <div class="col-xl-7 mb-4">        {{ bar_chart_panel("Health Risk by Income Level", "incomeRiskChart",            "Reveals disparity between socioeconomic status and heart risk. Data from Patient and RiskAssessment tables.") }}    </div>    <div class="col-xl-5 mb-4">        {{ line_chart_panel("Average Diet Score by Age Group", "dietScoreChart",            "Evaluates how age influences nutrition. Data from Patient and DietaryHabits tables.") }}    </div></div>        <!-- Exercise vs Sleep & Smoking Stress Correlation Row --><div class="row">    <div class="col-xl-6 mb-4">        {{ bar_chart_panel("Distribution of Exercise vs Sleep", "exerciseSleepChart",           "Checks if lifestyle balance impacts risk. Data from Lifestyle and RiskAssessment tables.") }}    </div>    <div class="col-xl-6 mb-4">        {{ bar_chart_panel("Smoking & Stress Correlation by Gender", "smokingStressChart",           "Highlights gender-specific behavioral health trends. Data from Lifestyle, RiskAssessment, and Patient tables.") }}    </div></div>        <!-- Risk Factors Table --><div class="card shadow mb-4">    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">        <h6 class="m-0 font-weight-bold text-primary">Key Risk Factors</h6>        <div class="dropdown no-arrow">            <a class="dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>            </a>            <div class="dropdown-menu dropdown-menu-end">                <a class="dropdown-item" href="#" onclick="exportTableToCSV(\"riskFactorsTable\", \"risk_factors.csv\"); return false;">                    <i class="fas fa-download fa-sm fa-fw me-2 text-gray-400"></i>Export CSV                </a>            </div>        </div>    </div>    <div class="card-body">        <div class="table-responsive">            <table class="table table-bordered" id="riskFactorsTable" width="100%" cellspacing="0">                <thead>                    <tr>                        <th>Risk Factor</th>                        <th>High Risk Count</th>                        <th>Medium Risk Count</th>                        <th>Low Risk Count</th>                        <th>Impact Score</th>                        <th>Trend</th>                    </tr>                </thead>                <tbody>                    <!-- This will be populated by JavaScript -->                </tbody>            </table>        </div>    </div></div>{% endblock %}{% block extra_js %}<script>    // Sample data from the server    var sampleData = {% if sample_data %}{{ sample_data|tojson|safe }}{% else %}null{% endif %};        // Create mock data for the dashboard    function getMockManagerialData() {        return {            // Population health data for charts            health_risk_income: [                {income_bracket: "Low Income", HeartAttackRiskText: "High Risk", count: 45},                {income_bracket: "Low Income", HeartAttackRiskText: "Medium Risk", count: 32},                {income_bracket: "Low Income", HeartAttackRiskText: "Low Risk", count: 23},                {income_bracket: "Middle Income", HeartAttackRiskText: "High Risk", count: 28},                {income_bracket: "Middle Income", HeartAttackRiskText: "Medium Risk", count: 42},                {income_bracket: "Middle Income", HeartAttackRiskText: "Low Risk", count: 50},                {income_bracket: "Upper Middle Income", HeartAttackRiskText: "High Risk", count: 15},                {income_bracket: "Upper Middle Income", HeartAttackRiskText: "Medium Risk", count: 38},                {income_bracket: "Upper Middle Income", HeartAttackRiskText: "Low Risk", count: 57},                {income_bracket: "High Income", HeartAttackRiskText: "High Risk", count: 10},                {income_bracket: "High Income", HeartAttackRiskText: "Medium Risk", count: 25},                {income_bracket: "High Income", HeartAttackRiskText: "Low Risk", count: 65}            ],                        // Diet score by age group            diet_score_age: [                {age_group: "18-29", average_score: 6.2},                {age_group: "30-44", average_score: 6.8},                {age_group: "45-59", average_score: 7.1},                {age_group: "60+", average_score: 7.9}            ],                        // Exercise and sleep data            exercise_sleep: [                {exercise_hours: 2, sleep_hours: 5, risk_level: "High", patient_count: 12},                {exercise_hours: 1, sleep_hours: 5, risk_level: "High", patient_count: 10},                {exercise_hours: 3, sleep_hours: 6, risk_level: "Medium", patient_count: 10},                {exercise_hours: 4, sleep_hours: 8, risk_level: "Medium", patient_count: 8},                {exercise_hours: 6, sleep_hours: 6, risk_level: "Medium", patient_count: 7},                {exercise_hours: 5, sleep_hours: 7, risk_level: "Low", patient_count: 15},                {exercise_hours: 7, sleep_hours: 8, risk_level: "Low", patient_count: 15}            ],                        // Smoking and stress data by gender            smoking_stress_gender: [                {gender: "Male", smoking_status: "Smoker", stress_level: "High", count: 42},                {gender: "Male", smoking_status: "Smoker", stress_level: "Medium", count: 35},                {gender: "Male", smoking_status: "Smoker", stress_level: "Low", count: 18},                {gender: "Male", smoking_status: "Non-Smoker", stress_level: "High", count: 30},                {gender: "Male", smoking_status: "Non-Smoker", stress_level: "Medium", count: 45},                {gender: "Male", smoking_status: "Non-Smoker", stress_level: "Low", count: 52},                {gender: "Female", smoking_status: "Smoker", stress_level: "High", count: 38},                {gender: "Female", smoking_status: "Smoker", stress_level: "Medium", count: 32},                {gender: "Female", smoking_status: "Smoker", stress_level: "Low", count: 15},                {gender: "Female", smoking_status: "Non-Smoker", stress_level: "High", count: 25},                {gender: "Female", smoking_status: "Non-Smoker", stress_level: "Medium", count: 48},                {gender: "Female", smoking_status: "Non-Smoker", stress_level: "Low", count: 58}            ],                        // Risk factors data            risk_factors: [                {factor: "Smoking", high_risk: 80, medium_risk: 45, low_risk: 10, impact: 8.5, trend: "down"},                {factor: "High Blood Pressure", high_risk: 75, medium_risk: 50, low_risk: 15, impact: 8.2, trend: "up"},                {factor: "Physical Inactivity", high_risk: 70, medium_risk: 40, low_risk: 20, impact: 7.8, trend: "stable"},                {factor: "Poor Diet", high_risk: 65, medium_risk: 50, low_risk: 25, impact: 7.5, trend: "up"},                {factor: "High Cholesterol", high_risk: 60, medium_risk: 55, low_risk: 30, impact: 7.2, trend: "stable"},                {factor: "Obesity", high_risk: 58, medium_risk: 52, low_risk: 35, impact: 7.0, trend: "up"},                {factor: "Diabetes", high_risk: 55, medium_risk: 48, low_risk: 40, impact: 6.8, trend: "up"},                {factor: "Stress", high_risk: 50, medium_risk: 60, low_risk: 45, impact: 6.5, trend: "up"},                {factor: "Family History", high_risk: 45, medium_risk: 40, low_risk: 38, impact: 6.0, trend: "stable"},                {factor: "Age", high_risk: 40, medium_risk: 65, low_risk: 50, impact: 5.8, trend: "stable"}            ]        };    }        // Wait for DOM to be fully loaded before initializing charts    document.addEventListener("DOMContentLoaded", function() {        console.log("DOM content loaded - setting up dashboard");                // Initialize dashboard        initializeManagerialDashboard();                // Fetch initial data        fetchDashboardData();                // Set up event listeners        document.getElementById("apply-filters").addEventListener("click", function() {            fetchDashboardData();        });                document.getElementById("reset-filters").addEventListener("click", function() {            // Reset filter form elements            const filterForms = document.querySelectorAll(".filter-section select, .filter-section input");            filterForms.forEach(input => {                if (input.type === "checkbox") {                    input.checked = false;                } else {                    input.value = "";                }            });                        // Fetch data with reset filters            fetchDashboardData();        });    });        // Main dashboard initialization function    function initializeManagerialDashboard() {        console.log("Initializing the four required dashboard charts");                // Clear any existing charts        if (window.Chart && Chart.helpers && Chart.helpers.each && Chart.instances) {            Chart.helpers.each(Chart.instances, function(instance) {                instance.destroy();            });        }                // Initialize the four specified charts        initializeIncomeRiskChart();        initializeDietScoreChart();        initializeExerciseSleepChart();        initializeSmokingStressChart();                // Initialize risk factors table        updateRiskFactorsTable();    }        // 1. Health Risk by Income Level - Vertical Bar Chart    function initializeIncomeRiskChart() {        const chartElement = document.getElementById("incomeRiskChart");        if (!chartElement || chartElement.tagName.toLowerCase() !== "canvas") {            console.error("Income Risk Chart element not found or not a canvas");            return null;        }                try {            const ctx = chartElement.getContext("2d");            window.incomeRiskChart = new Chart(ctx, {                type: "bar",                data: {                    labels: ["Low Income", "Middle Income", "Upper Middle Income", "High Income"],                    datasets: [                        {                            label: "High Risk",                            data: [45, 28, 15, 10],                            backgroundColor: "#f72585",                            borderWidth: 0                        },                        {                            label: "Medium Risk",                            data: [32, 42, 38, 25],                            backgroundColor: "#7209b7",                            borderWidth: 0                        },                        {                            label: "Low Risk",                            data: [23, 50, 57, 65],                            backgroundColor: "#4cc9f0",                            borderWidth: 0                        }                    ]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    plugins: {                        legend: {                            position: "bottom"                        },                        title: {                            display: true,                            text: "Health Risk by Income Level"                        }                    },                    scales: {                        x: { stacked: true },                        y: {                             stacked: true,                             beginAtZero: true,                            title: {                                display: true,                                text: "Number of Patients"                            }                        }                    }                }            });            console.log("Income Risk Chart initialized successfully");            return window.incomeRiskChart;        } catch (error) {            console.error("Error initializing Income Risk Chart:", error);            return null;        }    }        // 2. Average Diet Score by Age Group - Line Chart    function initializeDietScoreChart() {        const chartElement = document.getElementById("dietScoreChart");        if (!chartElement || chartElement.tagName.toLowerCase() !== "canvas") {            console.error("Diet Score Chart element not found or not a canvas");            return null;        }                try {            const ctx = chartElement.getContext("2d");            window.dietScoreChart = new Chart(ctx, {                type: "line",                data: {                    labels: ["18-29", "30-44", "45-59", "60+"],                    datasets: [{                        label: "Average Diet Score",                        data: [6.2, 6.8, 7.1, 7.9],                        backgroundColor: "rgba(76, 201, 240, 0.2)",                        borderColor: "#4cc9f0",                        borderWidth: 3,                        tension: 0.3                    }]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    plugins: {                        legend: {                            position: "bottom"                        },                        title: {                            display: true,                            text: "Average Diet Score by Age Group"                        }                    },                    scales: {                        y: {                            min: 0,                            max: 10,                            title: {                                display: true,                                text: "Diet Quality (0-10)"                            }                        },                        x: {                            title: {                                display: true,                                text: "Age Group"                            }                        }                    }                }            });            console.log("Diet Score Chart initialized successfully");            return window.dietScoreChart;        } catch (error) {            console.error("Error initializing Diet Score Chart:", error);            return null;        }    }        // 3. Exercise vs Sleep Distribution - Scatter Plot    function initializeExerciseSleepChart() {        const chartElement = document.getElementById("exerciseSleepChart");        if (!chartElement || chartElement.tagName.toLowerCase() !== "canvas") {            console.error("Exercise Sleep Chart element not found or not a canvas");            return null;        }                try {            const ctx = chartElement.getContext("2d");            window.exerciseSleepChart = new Chart(ctx, {                type: "scatter",                data: {                    datasets: [                        {                            label: "Low Risk",                            data: [                                {x: 5, y: 7},                                {x: 7, y: 8}                            ],                            backgroundColor: "rgba(28, 200, 138, 0.8)",                            pointRadius: 10,                            pointHoverRadius: 12                        },                        {                            label: "Medium Risk",                            data: [                                {x: 3, y: 6},                                {x: 4, y: 8},                                {x: 6, y: 6}                            ],                            backgroundColor: "rgba(246, 194, 62, 0.8)",                            pointRadius: 10,                            pointHoverRadius: 12                        },                        {                            label: "High Risk",                            data: [                                {x: 2, y: 5},                                {x: 1, y: 5}                            ],                            backgroundColor: "rgba(231, 74, 59, 0.8)",                            pointRadius: 10,                            pointHoverRadius: 12                        }                    ]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    plugins: {                        legend: {                            position: "bottom"                        },                        title: {                            display: true,                            text: "Exercise vs Sleep Distribution"                        }                    },                    scales: {                        x: {                            title: {                                display: true,                                text: "Exercise Hours Per Week"                            },                            min: 0,                            max: 8                        },                        y: {                            title: {                                display: true,                                text: "Sleep Hours Per Day"                            },                            min: 4,                            max: 9                        }                    }                }            });            console.log("Exercise Sleep Chart initialized successfully");            return window.exerciseSleepChart;        } catch (error) {            console.error("Error initializing Exercise Sleep Chart:", error);            return null;        }    }        // 4. Smoking & Stress by Gender - Grouped Column Chart    function initializeSmokingStressChart() {        const chartElement = document.getElementById("smokingStressChart");        if (!chartElement || chartElement.tagName.toLowerCase() !== "canvas") {            console.error("Smoking Stress Chart element not found or not a canvas");            return null;        }                try {            const ctx = chartElement.getContext("2d");            window.smokingStressChart = new Chart(ctx, {                type: "bar",                data: {                    labels: ["Male - Smoker", "Male - Non-Smoker", "Female - Smoker", "Female - Non-Smoker"],                    datasets: [                        {                            label: "High Stress",                            data: [42, 30, 38, 25],                            backgroundColor: "#f72585",                            borderWidth: 0                        },                        {                            label: "Medium Stress",                            data: [35, 45, 32, 48],                            backgroundColor: "#7209b7",                            borderWidth: 0                        },                        {                            label: "Low Stress",                            data: [18, 52, 15, 58],                            backgroundColor: "#4cc9f0",                            borderWidth: 0                        }                    ]                },                options: {                    responsive: true,                    maintainAspectRatio: false,                    plugins: {                        legend: {                            position: "bottom"                        },                        title: {                            display: true,                            text: "Stress Levels by Gender and Smoking Status"                        }                    },                    scales: {                        y: {                            beginAtZero: true,                            title: {                                display: true,                                text: "Number of Patients"                            }                        }                    }                }            });            console.log("Smoking Stress Chart initialized successfully");            return window.smokingStressChart;        } catch (error) {            console.error("Error initializing Smoking Stress Chart:", error);            return null;        }    }        // Function to fetch dashboard data (with filters if provided)    function fetchDashboardData() {        console.log("Fetching dashboard data with filters");                // In a real app, this would be an API call to get data based on filters        // For now, we use mock data        const data = getMockManagerialData();                // Update dashboard with fetched data        updateDashboardData(data);    }        // Function to update all charts with new data    function updateDashboardData(data) {        console.log("Updating dashboard with data:", data);                // Update Income Risk chart        if (window.incomeRiskChart) {            try {                incomeRiskChart.data.datasets[0].data = [45, 28, 15, 10]; // High Risk                incomeRiskChart.data.datasets[1].data = [32, 42, 38, 25]; // Medium Risk                incomeRiskChart.data.datasets[2].data = [23, 50, 57, 65]; // Low Risk                incomeRiskChart.update();            } catch (error) {                console.error("Error updating incomeRiskChart:", error);            }        }                // Update Diet Score chart        if (window.dietScoreChart) {            try {                dietScoreChart.data.datasets[0].data = [6.2, 6.8, 7.1, 7.9];                dietScoreChart.update();            } catch (error) {                console.error("Error updating dietScoreChart:", error);            }        }                // Update Exercise vs Sleep chart        if (window.exerciseSleepChart) {            try {                exerciseSleepChart.update();            } catch (error) {                console.error("Error updating exerciseSleepChart:", error);            }        }                // Update Smoking & Stress chart        if (window.smokingStressChart) {            try {                smokingStressChart.data.datasets[0].data = [42, 30, 38, 25]; // High Stress                smokingStressChart.data.datasets[1].data = [35, 45, 32, 48]; // Medium Stress                smokingStressChart.data.datasets[2].data = [18, 52, 15, 58]; // Low Stress                smokingStressChart.update();            } catch (error) {                console.error("Error updating smokingStressChart:", error);            }        }                // Update risk factors table        updateRiskFactorsTable();    }        // Function to update risk factors table    function updateRiskFactorsTable() {        const tableBody = document.querySelector("#riskFactorsTable tbody");        if (!tableBody) return;                // Clear existing rows        tableBody.innerHTML = "";                // Get risk factors data        const riskFactors = getMockManagerialData().risk_factors;                // Create rows for each risk factor        riskFactors.forEach(factor => {            const row = document.createElement("tr");                        // Trend icon based on trend value            let trendIcon = "";            switch(factor.trend) {                case "up":                    trendIcon = "<i class=\"fas fa-arrow-up text-danger\"></i>";                    break;                case "down":                    trendIcon = "<i class=\"fas fa-arrow-down text-success\"></i>";                    break;                default:                    trendIcon = "<i class=\"fas fa-minus text-warning\"></i>";            }                        // Fill row data            row.innerHTML = `                <td>${factor.factor}</td>                <td>${factor.high_risk}</td>                <td>${factor.medium_risk}</td>                <td>${factor.low_risk}</td>                <td>${factor.impact.toFixed(1)}/10</td>                <td>${trendIcon}</td>            `;                        tableBody.appendChild(row);        });    }        // Function to export table to CSV    function exportTableToCSV(tableId, filename) {        const table = document.getElementById(tableId);        if (!table) return;                let csv = [];        const rows = table.querySelectorAll("tr");                for (let i = 0; i < rows.length; i++) {            const row = [], cols = rows[i].querySelectorAll("td, th");                        for (let j = 0; j < cols.length; j++) {                // Get text content and remove HTML tags                let cellText = cols[j].innerText.replace(/(\r\n|\n|\r)/gm, "").replace(/\s\s+/g, " ");                                // Quote cell content if it contains comma or double quote                if (cellText.indexOf(",") > -1 || cellText.indexOf("\"") > -1) {                    cellText = `"${cellText.replace(/"/g, "\"\"")}"`;                }                                row.push(cellText);            }                        csv.push(row.join(","));        }                // Download CSV        const csvContent = csv.join("\n");        const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });                const link = document.createElement("a");        if (link.download !== undefined) {            const url = URL.createObjectURL(blob);            link.setAttribute("href", url);            link.setAttribute("download", filename);            link.style.visibility = "hidden";            document.body.appendChild(link);            link.click();            document.body.removeChild(link);        }    }</script>{% endblock %}